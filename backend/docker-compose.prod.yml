# =====================================
# SOLSOLHEY Production Environment  
# =====================================
# 운영환경용 Docker Compose Override



services:
  # =====================================
  # PostgreSQL - 운영환경 설정
  # =====================================
  postgres:
    environment:
      POSTGRES_DB: solsol
      # 운영환경에서는 더 강력한 비밀번호 사용
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    # 운영환경에서는 포트를 외부에 노출하지 않음
    ports: []
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      # 운영용 백업 스크립트 마운트
      - ./database/backup:/backup
    # 운영환경 PostgreSQL 최적화
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100
    # 리소스 제한
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # =====================================
  # Backend - 운영환경 설정
  # =====================================
  backend:
    build:
      context: ./solsol
      dockerfile: Dockerfile
      # 운영환경 빌드 최적화
      args:
        - BUILDKIT_INLINE_CACHE=0
    environment:
      # 운영 프로필 활성화
      SPRING_PROFILES_ACTIVE: prod
      
      # 운영 데이터베이스
      DB_HOST: postgres
      DB_NAME: solsol
      DB_PASSWORD: ${DB_PASSWORD}
      
      # 운영용 JWT 설정 (더 긴 키, 적절한 만료시간)
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ACCESS_TOKEN_EXPIRATION: 900000   # 15분
      JWT_REFRESH_TOKEN_EXPIRATION: 604800000  # 7일
      
      # 운영용 CORS (실제 도메인만 허용)
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-https://solsolhey.com,https://app.solsolhey.com}
      
      # 운영용 로깅 (에러 레벨만)
      LOGGING_LEVEL_ROOT: WARN
      LOGGING_LEVEL_COM_SOLSOLHEY: INFO
      
      # JPA 운영 설정
      JPA_SHOW_SQL: false
      JPA_FORMAT_SQL: false
      JPA_HIBERNATE_DDL_AUTO: validate  # 운영에서는 validate만
      
      # 보안 강화
      SWAGGER_UI_ENABLED: false  # 운영에서는 비활성화
      H2_CONSOLE_ENABLED: false
      
      # 성능 최적화
      JAVA_OPTS: "-Xmx2g -Xms1g -XX:+UseG1GC -XX:MaxGCPauseMillis=200"
      
      # SSL/TLS 설정
      SSL_ENABLED: ${SSL_ENABLED:-false}
      
    # 운영환경에서는 기본 포트만 노출
    ports:
      - "8080:8080"
    volumes:
      # 운영용 로그 (로그 로테이션 적용)
      - ./logs/prod:/app/logs
      - ./uploads:/app/uploads
    # 항상 재시작
    restart: always
    # 리소스 제한
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # =====================================
  # Redis - 운영환경
  # =====================================  
  redis:
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    # 운영환경에서는 포트 비노출
    ports: []
    volumes:
      - redis_prod_data:/data
    # Redis 운영 최적화
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    # 리소스 제한
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

# =====================================
# 운영환경 추가 서비스
# =====================================
  # Nginx (리버스 프록시)
  nginx:
    image: nginx:alpine
    container_name: solsol-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - solsol-network
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # 모니터링: Prometheus (선택사항)
  prometheus:
    image: prom/prometheus:latest
    container_name: solsol-prometheus
    restart: always
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - solsol-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # 모니터링: Grafana (선택사항)  
  grafana:
    image: grafana/grafana:latest
    container_name: solsol-grafana
    restart: always
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - solsol-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

# =====================================
# 운영환경용 볼륨
# =====================================
volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
