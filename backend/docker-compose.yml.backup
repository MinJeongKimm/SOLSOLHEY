# =====================================
# SOLSOLHEY Docker Compose
# =====================================
# 전체 스택 (Backend + Database) 관리



# =====================================
# 서비스 정의
# =====================================
services:
  # =====================================
  # PostgreSQL 데이터베이스
  # =====================================
  postgres:
    image: postgres:15-alpine
    container_name: solsol-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-solsol}
      POSTGRES_USER: ${DB_USER:-solsol}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/solsol/src/main/resources/db/init:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - solsol-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-solsol} -d ${DB_NAME:-solsol}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # =====================================
# Spring Boot 백엔드 앱
# =====================================
backend:
  build:
    context: ./solsol
    dockerfile: Dockerfile

  container_name: solsol-backend
  restart: unless-stopped
  depends_on:
    postgres:
      condition: service_healthy
  environment:
      # Spring 프로필 설정
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-dev}
      
      # 데이터베이스 연결 설정
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-solsol}
      DB_USER: ${DB_USER:-solsol}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      
      # JWT 설정
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ACCESS_TOKEN_EXPIRATION: ${JWT_ACCESS_TOKEN_EXPIRATION:-900000}
      JWT_REFRESH_TOKEN_EXPIRATION: ${JWT_REFRESH_TOKEN_EXPIRATION:-604800000}
      
      # 금융 API 설정
      FINANCE_API_KEY: ${FINANCE_API_KEY}
      FINANCE_API_BASE_URL: ${FINANCE_API_BASE_URL:-https://finopenapi.ssafy.io/ssafy/api/v1/edu}
      
      # CORS 설정
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:5173}
      CORS_ALLOWED_METHODS: ${CORS_ALLOWED_METHODS:-GET,POST,PUT,PATCH,DELETE,OPTIONS}
      CORS_ALLOWED_HEADERS: ${CORS_ALLOWED_HEADERS:-*}
      CORS_ALLOW_CREDENTIALS: ${CORS_ALLOW_CREDENTIALS:-true}
      
      # 서버 설정
      SERVER_PORT: 8080
      SERVER_SERVLET_CONTEXT_PATH: /api/v1
      
      # JVM 설정
      JAVA_OPTS: "-Xmx1g -Xms512m"
      
  ports:
    - "${SERVER_PORT:-8080}:8080"
  volumes:
    # 로그 볼륨 (선택사항)
    - ./logs:/app/logs
  networks:
    - solsol-network
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 60s

# =====================================
# Redis (캐시 & 세션) - 선택사항
# =====================================
  redis:
    image: redis:7-alpine
    container_name: solsol-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-password}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - solsol-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

# =====================================
# 볼륨 정의
# =====================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# =====================================
# 네트워크 정의
# =====================================
networks:
  solsol-network:
    driver: bridge
