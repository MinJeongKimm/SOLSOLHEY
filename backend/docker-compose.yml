# =====================================
# SOLSOLHEY Docker Compose
# =====================================
# 전체 스택 (Backend + Database + 개발 도구) 관리

# =====================================
# 서비스 정의
# =====================================
services:
  # =====================================
  # PostgreSQL 데이터베이스
  # =====================================
  postgres:
    image: postgres:15-alpine
    container_name: solsol-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./solsol/src/main/resources/db/init:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - solsol-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-solsol} -d ${DB_NAME:-solsol}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # =====================================
  # Spring Boot 백엔드 앱
  # =====================================
  backend:
    build:
      context: ./solsol
      dockerfile: Dockerfile
    container_name: solsol-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Spring 프로필 설정
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      
      # 데이터베이스 연결 설정
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      
      # JWT 설정
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ACCESS_TOKEN_EXPIRATION: ${JWT_ACCESS_TOKEN_EXPIRATION:-900000}
      JWT_REFRESH_TOKEN_EXPIRATION: ${JWT_REFRESH_TOKEN_EXPIRATION:-604800000}
      
      # 금융 API 설정
      FINANCE_API_KEY: ${FINANCE_API_KEY}
      FINANCE_API_BASE_URL: ${FINANCE_API_BASE_URL:-https://finopenapi.ssafy.io/ssafy/api/v1/edu}
      
      # CORS 설정
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:5173}
      CORS_ALLOWED_METHODS: ${CORS_ALLOWED_METHODS:-GET,POST,PUT,PATCH,DELETE,OPTIONS}
      CORS_ALLOWED_HEADERS: ${CORS_ALLOWED_HEADERS:-*}
      CORS_ALLOWED_CREDENTIALS: ${CORS_ALLOWED_CREDENTIALS:-true}
      
      # 서버 설정
      SERVER_PORT: 8080
      # SERVER_SERVLET_CONTEXT_PATH: /api/v1  # 컨텍스트 패스 제거 - 컨트롤러에서 /api/v1 이미 사용 중
      
      # JVM 설정
      JAVA_OPTS: "-Xmx1g -Xms512m"
      
    ports:
      - "${SERVER_PORT:-8080}:8080"
    volumes:
      # 로그 볼륨 (선택사항)
      - ./logs:/app/logs
    networks:
      - solsol-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =====================================
  # Redis (캐시 & 세션)
  # =====================================
  redis:
    image: redis:7-alpine
    container_name: solsol-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-password}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - solsol-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================
  # pgAdmin (PostgreSQL 관리 도구)
  # =====================================
  pgadmin:
    image: dpage/pgadmin4:8.12
    platform: linux/arm64/v8
    container_name: solsol-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@solsol.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      # 문자열 옵션은 파이썬 리터럴(따옴표 포함)이어야 함!
      PGADMIN_CONFIG_LOGIN_BANNER: '"Development Environment - CSRF Protected"'
      # 숫자 옵션은 정수로
      GUNICORN_TIMEOUT: "60"
      # CSRF 보호는 유지하되 세션 설정 최적화
      PGADMIN_CONFIG_CSRF_PROTECTION: "${PGADMIN_CSRF_PROTECTION:-True}"
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: "${PGADMIN_COOKIE_PROTECTION:-False}"
      PGADMIN_CONFIG_SESSION_COOKIE_SECURE: "False"
      PGADMIN_CONFIG_SESSION_COOKIE_HTTPONLY: "True"
      PGADMIN_CONFIG_SESSION_COOKIE_SAMESITE: '"Lax"'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - solsol-network
    depends_on:
      - postgres

  # =====================================
  # Redis Commander (Redis 관리 도구)
  # =====================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: solsol-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-password}
      REDIS_PORT: 6379
    ports:
      - "8081:8081"
    networks:
      - solsol-network
    depends_on:
      - redis

# =====================================
# 볼륨 정의
# =====================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

# =====================================
# 네트워크 정의
# =====================================
networks:
  solsol-network:
    driver: bridge
