-- =====================================================
-- SOLSOLHEY PostgreSQL 데이터베이스 초기화 스크립트
-- =====================================================

-- 사용자 테이블
CREATE TABLE IF NOT EXISTS users (
    user_id BIGSERIAL PRIMARY KEY,
    username VARCHAR(255) NOT NULL UNIQUE,
    email VARCHAR(255) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    nickname VARCHAR(255) NOT NULL UNIQUE,
    campus VARCHAR(255),
    total_points INT DEFAULT 0,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 아이템 테이블
CREATE TABLE IF NOT EXISTS shop_items (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    price INT NOT NULL,
    type VARCHAR(50) NOT NULL, -- EQUIP, BACKGROUND, ETC
    image_url VARCHAR(255),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 사용자 아이템 보유 테이블
CREATE TABLE IF NOT EXISTS shop_user_items (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL,
    item_id BIGINT NOT NULL,
    quantity INTEGER NOT NULL DEFAULT 1,
    purchased_at TIMESTAMP NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_shop_user_items_user_id FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT fk_shop_user_items_item_id FOREIGN KEY (item_id) REFERENCES shop_items(id) ON DELETE CASCADE,
    CONSTRAINT uk_user_item UNIQUE (user_id, item_id)
);

-- 배경 테이블
CREATE TABLE IF NOT EXISTS backgrounds (
    id VARCHAR(50) PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    preview_url VARCHAR(500) NOT NULL,
    enabled BOOLEAN NOT NULL DEFAULT TRUE,
    tags TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 사용자 배경 보유 테이블
CREATE TABLE IF NOT EXISTS user_backgrounds (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL,
    background_id VARCHAR(50) NOT NULL,
    acquired_at TIMESTAMP NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_user_backgrounds_user_id FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT fk_user_backgrounds_background_id FOREIGN KEY (background_id) REFERENCES backgrounds(id) ON DELETE CASCADE,
    CONSTRAINT uk_user_background UNIQUE (user_id, background_id)
);

-- 캠퍼스 테이블
CREATE TABLE IF NOT EXISTS campus (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 인덱스 생성
CREATE INDEX IF NOT EXISTS idx_shop_user_items_user_id ON shop_user_items(user_id);
CREATE INDEX IF NOT EXISTS idx_shop_user_items_item_id ON shop_user_items(item_id);
CREATE INDEX IF NOT EXISTS idx_user_backgrounds_user_id ON user_backgrounds(user_id);
CREATE INDEX IF NOT EXISTS idx_user_backgrounds_background_id ON user_backgrounds(background_id);
CREATE INDEX IF NOT EXISTS idx_backgrounds_enabled ON backgrounds(enabled);

-- =====================================================
-- 초기 데이터 삽입
-- =====================================================

-- 캠퍼스 데이터 삽입
-- H2(PostgreSQL 모드)와 PostgreSQL 모두 호환되도록, 중복 방지는 WHERE NOT EXISTS로 처리
INSERT INTO campus (name)
SELECT 'SSAFY 서울캠퍼스' WHERE NOT EXISTS (SELECT 1 FROM campus WHERE name = 'SSAFY 서울캠퍼스');
INSERT INTO campus (name)
SELECT 'SSAFY 대전캠퍼스' WHERE NOT EXISTS (SELECT 1 FROM campus WHERE name = 'SSAFY 대전캠퍼스');
INSERT INTO campus (name)
SELECT 'SSAFY 광주캠퍼스' WHERE NOT EXISTS (SELECT 1 FROM campus WHERE name = 'SSAFY 광주캠퍼스');
INSERT INTO campus (name)
SELECT 'SSAFY 구미캠퍼스' WHERE NOT EXISTS (SELECT 1 FROM campus WHERE name = 'SSAFY 구미캠퍼스');
INSERT INTO campus (name)
SELECT 'SSAFY 부울경캠퍼스' WHERE NOT EXISTS (SELECT 1 FROM campus WHERE name = 'SSAFY 부울경캠퍼스');

-- =====================================================
-- 챌린지/카테고리 스키마 및 시드 (H2/PostgreSQL 호환)
-- =====================================================

-- 챌린지 카테고리 테이블
CREATE TABLE IF NOT EXISTS challenge_category (
    category_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    category_name VARCHAR(50) NOT NULL UNIQUE,
    display_name VARCHAR(50) NOT NULL,
    description VARCHAR(200),
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 챌린지 테이블
CREATE TABLE IF NOT EXISTS challenge (
    challenge_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    category_id BIGINT NOT NULL,
    challenge_name VARCHAR(100) NOT NULL,
    description VARCHAR(500),
    reward_points INT NOT NULL,
    reward_exp INT NOT NULL,
    challenge_type VARCHAR(20) NOT NULL,
    difficulty VARCHAR(20) NOT NULL,
    start_date TIMESTAMP,
    end_date TIMESTAMP,
    target_count INT NOT NULL DEFAULT 1,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_challenge_category FOREIGN KEY (category_id) REFERENCES challenge_category(category_id)
);

-- 카테고리 시드 (멱등)
INSERT INTO challenge_category (category_name, display_name, description)
SELECT 'FINANCE', '금융', '금융 관련 챌린지' WHERE NOT EXISTS (SELECT 1 FROM challenge_category WHERE category_name = 'FINANCE');
INSERT INTO challenge_category (category_name, display_name, description)
SELECT 'ACADEMIC', '학사', '학업 관련 챌린지' WHERE NOT EXISTS (SELECT 1 FROM challenge_category WHERE category_name = 'ACADEMIC');
INSERT INTO challenge_category (category_name, display_name, description)
SELECT 'SOCIAL', '소셜', '사회 활동 관련 챌린지' WHERE NOT EXISTS (SELECT 1 FROM challenge_category WHERE category_name = 'SOCIAL');
INSERT INTO challenge_category (category_name, display_name, description)
SELECT 'EVENT', '이벤트', '특별 이벤트 챌린지' WHERE NOT EXISTS (SELECT 1 FROM challenge_category WHERE category_name = 'EVENT');

-- 샘플 챌린지 시드 (멱등)
INSERT INTO challenge (
    category_id, challenge_name, description, reward_points, reward_exp,
    challenge_type, difficulty, start_date, end_date, target_count, is_active
)
SELECT (SELECT category_id FROM challenge_category WHERE category_name = 'FINANCE'),
       '7일 연속 용돈 기입장 작성하기',
       '매일 하루 용돈 사용 내역을 기록해보세요!',
       100, 50,
       'WEEKLY', 'EASY', CURRENT_TIMESTAMP, NULL, 7, TRUE
WHERE NOT EXISTS (
    SELECT 1 FROM challenge WHERE challenge_name = '7일 연속 용돈 기입장 작성하기'
);

INSERT INTO challenge (
    category_id, challenge_name, description, reward_points, reward_exp,
    challenge_type, difficulty, start_date, end_date, target_count, is_active
)
SELECT (SELECT category_id FROM challenge_category WHERE category_name = 'FINANCE'),
       '한 달 예산 계획 세우기',
       '이번 달 수입과 지출 계획을 세워보세요.',
       200, 100,
       'MONTHLY', 'MEDIUM', CURRENT_TIMESTAMP, NULL, 1, TRUE
WHERE NOT EXISTS (
    SELECT 1 FROM challenge WHERE challenge_name = '한 달 예산 계획 세우기'
);

INSERT INTO challenge (
    category_id, challenge_name, description, reward_points, reward_exp,
    challenge_type, difficulty, start_date, end_date, target_count, is_active
)
SELECT (SELECT category_id FROM challenge_category WHERE category_name = 'ACADEMIC'),
       '매일 2시간 공부하기',
       '매일 최소 2시간 이상 공부하고 인증해보세요!',
       50, 25,
       'DAILY', 'MEDIUM', CURRENT_TIMESTAMP, NULL, 7, TRUE
WHERE NOT EXISTS (
    SELECT 1 FROM challenge WHERE challenge_name = '매일 2시간 공부하기'
);

INSERT INTO challenge (
    category_id, challenge_name, description, reward_points, reward_exp,
    challenge_type, difficulty, start_date, end_date, target_count, is_active
)
SELECT (SELECT category_id FROM challenge_category WHERE category_name = 'ACADEMIC'),
       '과제 미루지 않기',
        '과제를 마감일 하루 전까지 완료해보세요.',
       150, 75,
       'SPECIAL', 'HARD', CURRENT_TIMESTAMP, NULL, 3, TRUE
WHERE NOT EXISTS (
    SELECT 1 FROM challenge WHERE challenge_name = '과제 미루지 않기'
);

INSERT INTO challenge (
    category_id, challenge_name, description, reward_points, reward_exp,
    challenge_type, difficulty, start_date, end_date, target_count, is_active
)
SELECT (SELECT category_id FROM challenge_category WHERE category_name = 'SOCIAL'),
       '친구와 함께 커피 마시기',
       '친구들과 만나서 소중한 시간을 보내보세요.',
       80, 40,
       'WEEKLY', 'EASY', CURRENT_TIMESTAMP, NULL, 2, TRUE
WHERE NOT EXISTS (
    SELECT 1 FROM challenge WHERE challenge_name = '친구와 함께 커피 마시기'
);
