
# 📝 개발환경 세팅 합의사항 (Recommended)

## 🌐 공통 규칙

- **런타임/빌드**
    - JDK: **Java 21 LTS**
    - Spring Boot: **3.3.x 고정**
    - 빌드: **Gradle Kotlin DSL (Wrapper 필수)**
    - 레포 구조: **모노레포**
        
        ```
        frontend/
        backend/
        infra/
        
        ```
        
- **DB/Infra**
    - DB: **Postgres 16** (Docker Compose)
    - Cache: **Redis 7** (Docker Compose)
    - 마이그레이션: `local`은 `ddl-auto=update`, `dev/prod`는 **Flyway**
    - 테이블 네이밍: **snake_case + 복수형** (`users`, `user_challenges`)
    - 공통 컬럼: `id`, `created_at`, `updated_at`
- **환경변수 관리**
    - 리포에는 `.env.example`만 커밋
    - 로컬: `.env`, 배포: GitHub Secrets
    - 키 이름 표준화:
        
        ```
        DB_HOST, DB_PORT, DB_NAME, DB_USER, DB_PASS
        JWT_SECRET, JWT_EXPIRES_IN
        SHINHAN_API_KEY, SHINHAN_API_BASE
        
        ```
        
- **API 규약**
    - 프리픽스: `/api/v1`
    - 응답 표준:
        
        ```json
        // 성공
        { "success": true, "data": { ... }, "traceId": "..." }
        
        // 실패
        { "success": false, "error": { "code": "USER_NOT_FOUND", "message": "..." }, "traceId": "..." }
        
        ```
        
    - 예외 매핑: GlobalExceptionHandler로 400/401/403/404/409/422/500 정규화
    - 날짜/시간: **DB는 UTC, 응답은 ISO-8601, 표시(KST)는 FE**
    - JSON 필드 네이밍: **camelCase**
- **Git/코드 스타일**
    - `.gitattributes`로 개행 LF 고정
    - **Backend**: Spotless (구글 스타일)
    - **Frontend**: ESLint + Prettier
    - 브랜치 네이밍: `feat/`, `fix/`, `chore/`, `refactor/`, `docs/`
    - Conventional Commits 적용
- **테스트/품질**
    - 커버리지 목표: Line 70% / Branch 60% 이상
    - CI: PR 시 Ubuntu CI에서 BE/FE 빌드·테스트 자동 실행

---

## 🖥️ 백엔드 (Spring Boot)

- **구조**
    
    ```
    config/
    controller/
    service/
    service/impl/
    repository/
    entity/
    dto/
    exception/
    util/
    
    ```
    
- **의존성**
    - `spring-boot-starter-web`
    - `spring-boot-starter-data-jpa`
    - `spring-boot-starter-security`
    - `jjwt 0.11.5` (JWT)
    - `springdoc-openapi`
    - `postgresql 42.7.x`
- **보안**
    - 인증: JWT (Authorization: Bearer …)
    - Access Token 30분, Refresh Token 14일
    - Claims: `sub`, `roles`, `exp`
    - Roles: `USER`, `ADMIN`
    - Refresh 토큰: 서버 저장 X (만료만 관리)
- **트랜잭션 규칙**
    - Service 레이어에서 시작
    - 조회 전용은 `@Transactional(readOnly = true)`
- **성능**
    - 지연로딩 기본, N+1 → fetch join or EntityGraph
    - Redis 캐싱: 키 규칙 `domain:sub:params`
    - FK/조회 컬럼 인덱스 생성
- **테스트**
    - **JUnit5 + Testcontainers(Postgres/Redis)**
    - Repository, Service 레벨 통합테스트 필수

---

## 🎨 프론트엔드 (Next.js)

- **런타임**
    - Node.js: **20 LTS**
    - 패키지 매니저: PNPM 9
    - 타입 시스템: TypeScript 5.x
- **API 연동**
    - OpenAPI 3.1 스키마 기반 → `openapi-typescript`로 타입 자동 생성
- **코드 스타일**
    - ESLint (next/core-web-vitals), Prettier
    - Husky + lint-staged → 커밋 전 자동 포맷팅
- **테스트**
    - 단위: Vitest + Testing Library
    - E2E: Playwright (로그인/챌린지/포인트 적립 플로우 최소 보장)

---

## ⚙️ 도메인 규칙 (비즈니스 로직)

- **포인트/경험치**
    - 챌린지 1개 = 10P
    - 하루 상한 = 100P
    - 환급 불가
- **챌린지 상태 머신**
    - `PENDING → ACCEPTED → COMPLETED → REWARDED`
- **아이템/상점**
    - 구매/장착/환불 정책: 환불 불가, 중복구매 처리 필요
- **랭킹**
    - 주간/월간 단위, 동점 처리 규칙 필요
- **개인정보/로그**
    - 민감정보 저장 금지
    - 액세스로그 90일 보관

---

## 🔗 외부 API (신한 등)

- **샌드박스/운영 분리** (Base URL/Key)
- 실패 시 리트라이 + 타임아웃 2초
- 신한 API 에러코드 → 내부 에러코드 매핑
- 환율/거래 조회는 캐싱 (1~5분 TTL)